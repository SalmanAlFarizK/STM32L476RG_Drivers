
002_UART_Tx_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b8  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800053c  0800053c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800053c  0800053c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800053c  0800053c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800053c  0800053c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800053c  0800053c  0001053c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000540  08000540  00010540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000023ce  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000007a7  00000000  00000000  0002244d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002c8  00000000  00000000  00022bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001f2  00000000  00000000  00022ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000240c3  00000000  00000000  000230b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002876  00000000  00000000  00047175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3e3d  00000000  00000000  000499eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000a1c  00000000  00000000  0012d828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0012e244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000524 	.word	0x08000524

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08000524 	.word	0x08000524

080001c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ca:	2300      	movs	r3, #0
 80001cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ce:	2003      	movs	r0, #3
 80001d0:	f000 f91a 	bl	8000408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d4:	2000      	movs	r0, #0
 80001d6:	f000 f815 	bl	8000204 <HAL_InitTick>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d002      	beq.n	80001e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e0:	2301      	movs	r3, #1
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	e001      	b.n	80001ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001e6:	f000 f805 	bl	80001f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
	...

08000204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800020c:	2300      	movs	r3, #0
 800020e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <HAL_InitTick+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d023      	beq.n	8000260 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000218:	4b16      	ldr	r3, [pc, #88]	; (8000274 <HAL_InitTick+0x70>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <HAL_InitTick+0x6c>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000226:	fbb3 f3f1 	udiv	r3, r3, r1
 800022a:	fbb2 f3f3 	udiv	r3, r2, r3
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f911 	bl	8000456 <HAL_SYSTICK_Config>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d10f      	bne.n	800025a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b0f      	cmp	r3, #15
 800023e:	d809      	bhi.n	8000254 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000240:	2200      	movs	r2, #0
 8000242:	6879      	ldr	r1, [r7, #4]
 8000244:	f04f 30ff 	mov.w	r0, #4294967295
 8000248:	f000 f8e9 	bl	800041e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800024c:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <HAL_InitTick+0x74>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	6013      	str	r3, [r2, #0]
 8000252:	e007      	b.n	8000264 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
 8000258:	e004      	b.n	8000264 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800025a:	2301      	movs	r3, #1
 800025c:	73fb      	strb	r3, [r7, #15]
 800025e:	e001      	b.n	8000264 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000260:	2301      	movs	r3, #1
 8000262:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000264:	7bfb      	ldrb	r3, [r7, #15]
}
 8000266:	4618      	mov	r0, r3
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000004 	.word	0x20000004
 8000274:	20000008 	.word	0x20000008
 8000278:	20000000 	.word	0x20000000

0800027c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <HAL_IncTick+0x20>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	461a      	mov	r2, r3
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <HAL_IncTick+0x24>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4413      	add	r3, r2
 800028c:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <HAL_IncTick+0x24>)
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000004 	.word	0x20000004
 80002a0:	20000028 	.word	0x20000028

080002a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f003 0307 	and.w	r3, r3, #7
 80002b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <__NVIC_SetPriorityGrouping+0x44>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ba:	68ba      	ldr	r2, [r7, #8]
 80002bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c0:	4013      	ands	r3, r2
 80002c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002d6:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <__NVIC_SetPriorityGrouping+0x44>)
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	60d3      	str	r3, [r2, #12]
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <__NVIC_GetPriorityGrouping+0x18>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	f003 0307 	and.w	r3, r3, #7
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	6039      	str	r1, [r7, #0]
 8000312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000318:	2b00      	cmp	r3, #0
 800031a:	db0a      	blt.n	8000332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	b2da      	uxtb	r2, r3
 8000320:	490c      	ldr	r1, [pc, #48]	; (8000354 <__NVIC_SetPriority+0x4c>)
 8000322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000326:	0112      	lsls	r2, r2, #4
 8000328:	b2d2      	uxtb	r2, r2
 800032a:	440b      	add	r3, r1
 800032c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000330:	e00a      	b.n	8000348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4908      	ldr	r1, [pc, #32]	; (8000358 <__NVIC_SetPriority+0x50>)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	f003 030f 	and.w	r3, r3, #15
 800033e:	3b04      	subs	r3, #4
 8000340:	0112      	lsls	r2, r2, #4
 8000342:	b2d2      	uxtb	r2, r2
 8000344:	440b      	add	r3, r1
 8000346:	761a      	strb	r2, [r3, #24]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000e100 	.word	0xe000e100
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800035c:	b480      	push	{r7}
 800035e:	b089      	sub	sp, #36	; 0x24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f003 0307 	and.w	r3, r3, #7
 800036e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000370:	69fb      	ldr	r3, [r7, #28]
 8000372:	f1c3 0307 	rsb	r3, r3, #7
 8000376:	2b04      	cmp	r3, #4
 8000378:	bf28      	it	cs
 800037a:	2304      	movcs	r3, #4
 800037c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	3304      	adds	r3, #4
 8000382:	2b06      	cmp	r3, #6
 8000384:	d902      	bls.n	800038c <NVIC_EncodePriority+0x30>
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	3b03      	subs	r3, #3
 800038a:	e000      	b.n	800038e <NVIC_EncodePriority+0x32>
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000390:	f04f 32ff 	mov.w	r2, #4294967295
 8000394:	69bb      	ldr	r3, [r7, #24]
 8000396:	fa02 f303 	lsl.w	r3, r2, r3
 800039a:	43da      	mvns	r2, r3
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	401a      	ands	r2, r3
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a4:	f04f 31ff 	mov.w	r1, #4294967295
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
 80003ae:	43d9      	mvns	r1, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b4:	4313      	orrs	r3, r2
         );
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3724      	adds	r7, #36	; 0x24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
	...

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003d4:	d301      	bcc.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e00f      	b.n	80003fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <SysTick_Config+0x40>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3b01      	subs	r3, #1
 80003e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	210f      	movs	r1, #15
 80003e4:	f04f 30ff 	mov.w	r0, #4294967295
 80003e8:	f7ff ff8e 	bl	8000308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <SysTick_Config+0x40>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <SysTick_Config+0x40>)
 80003f4:	2207      	movs	r2, #7
 80003f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	e000e010 	.word	0xe000e010

08000408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f7ff ff47 	bl	80002a4 <__NVIC_SetPriorityGrouping>
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b086      	sub	sp, #24
 8000422:	af00      	add	r7, sp, #0
 8000424:	4603      	mov	r3, r0
 8000426:	60b9      	str	r1, [r7, #8]
 8000428:	607a      	str	r2, [r7, #4]
 800042a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000430:	f7ff ff5c 	bl	80002ec <__NVIC_GetPriorityGrouping>
 8000434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	68b9      	ldr	r1, [r7, #8]
 800043a:	6978      	ldr	r0, [r7, #20]
 800043c:	f7ff ff8e 	bl	800035c <NVIC_EncodePriority>
 8000440:	4602      	mov	r2, r0
 8000442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000446:	4611      	mov	r1, r2
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff5d 	bl	8000308 <__NVIC_SetPriority>
}
 800044e:	bf00      	nop
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffb0 	bl	80003c4 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <main>:
#define UART2_RX_PIN		(GPIO_PIN_3)

void InitUart2(void);

int main(void)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	af00      	add	r7, sp, #0
	/* Initialize HAL. */
	HAL_Init();
 8000472:	f7ff fea7 	bl	80001c4 <HAL_Init>
 8000476:	2300      	movs	r3, #0
}
 8000478:	4618      	mov	r0, r3
 800047a:	bd80      	pop	{r7, pc}

0800047c <SysTick_Handler>:

	return;
}

void SysTick_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000480:	f7ff fefc 	bl	800027c <HAL_IncTick>
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800048c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000492:	490d      	ldr	r1, [pc, #52]	; (80004c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000494:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <LoopForever+0xe>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000498:	e002      	b.n	80004a0 <LoopCopyDataInit>

0800049a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800049c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049e:	3304      	adds	r3, #4

080004a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a4:	d3f9      	bcc.n	800049a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a8:	4c0a      	ldr	r4, [pc, #40]	; (80004d4 <LoopForever+0x16>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ac:	e001      	b.n	80004b2 <LoopFillZerobss>

080004ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b0:	3204      	adds	r2, #4

080004b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b4:	d3fb      	bcc.n	80004ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b6:	f000 f811 	bl	80004dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ba:	f7ff ffd8 	bl	800046e <main>

080004be <LoopForever>:

LoopForever:
  b LoopForever
 80004be:	e7fe      	b.n	80004be <LoopForever>
  ldr   r0, =_estack
 80004c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004cc:	08000544 	.word	0x08000544
  ldr r2, =_sbss
 80004d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004d4:	2000002c 	.word	0x2000002c

080004d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_2_IRQHandler>
	...

080004dc <__libc_init_array>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	4d0d      	ldr	r5, [pc, #52]	; (8000514 <__libc_init_array+0x38>)
 80004e0:	4c0d      	ldr	r4, [pc, #52]	; (8000518 <__libc_init_array+0x3c>)
 80004e2:	1b64      	subs	r4, r4, r5
 80004e4:	10a4      	asrs	r4, r4, #2
 80004e6:	2600      	movs	r6, #0
 80004e8:	42a6      	cmp	r6, r4
 80004ea:	d109      	bne.n	8000500 <__libc_init_array+0x24>
 80004ec:	4d0b      	ldr	r5, [pc, #44]	; (800051c <__libc_init_array+0x40>)
 80004ee:	4c0c      	ldr	r4, [pc, #48]	; (8000520 <__libc_init_array+0x44>)
 80004f0:	f000 f818 	bl	8000524 <_init>
 80004f4:	1b64      	subs	r4, r4, r5
 80004f6:	10a4      	asrs	r4, r4, #2
 80004f8:	2600      	movs	r6, #0
 80004fa:	42a6      	cmp	r6, r4
 80004fc:	d105      	bne.n	800050a <__libc_init_array+0x2e>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	f855 3b04 	ldr.w	r3, [r5], #4
 8000504:	4798      	blx	r3
 8000506:	3601      	adds	r6, #1
 8000508:	e7ee      	b.n	80004e8 <__libc_init_array+0xc>
 800050a:	f855 3b04 	ldr.w	r3, [r5], #4
 800050e:	4798      	blx	r3
 8000510:	3601      	adds	r6, #1
 8000512:	e7f2      	b.n	80004fa <__libc_init_array+0x1e>
 8000514:	0800053c 	.word	0x0800053c
 8000518:	0800053c 	.word	0x0800053c
 800051c:	0800053c 	.word	0x0800053c
 8000520:	08000540 	.word	0x08000540

08000524 <_init>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	bf00      	nop
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr

08000530 <_fini>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	bf00      	nop
 8000534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000536:	bc08      	pop	{r3}
 8000538:	469e      	mov	lr, r3
 800053a:	4770      	bx	lr

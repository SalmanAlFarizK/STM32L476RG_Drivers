
002_UART_Tx_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023ac  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002530  08002530  00012530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800258c  0800258c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002594  08002594  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002598  08002598  00012598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800259c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000808d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000113f  00000000  00000000  0002810c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000740  00000000  00000000  00029250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000589  00000000  00000000  00029990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002485b  00000000  00000000  00029f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008921  00000000  00000000  0004e774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e52f6  00000000  00000000  00057095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001da4  00000000  00000000  0013c38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  0013e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08002518 	.word	0x08002518

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08002518 	.word	0x08002518

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b970 	b.w	80004bc <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	460f      	mov	r7, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14a      	bne.n	800029a <__udivmoddi4+0xa6>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d965      	bls.n	80002d6 <__udivmoddi4+0xe2>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b143      	cbz	r3, 8000222 <__udivmoddi4+0x2e>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	409f      	lsls	r7, r3
 800021a:	fa20 f202 	lsr.w	r2, r0, r2
 800021e:	4317      	orrs	r7, r2
 8000220:	409c      	lsls	r4, r3
 8000222:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000226:	fa1f f58c 	uxth.w	r5, ip
 800022a:	fbb7 f1fe 	udiv	r1, r7, lr
 800022e:	0c22      	lsrs	r2, r4, #16
 8000230:	fb0e 7711 	mls	r7, lr, r1, r7
 8000234:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000238:	fb01 f005 	mul.w	r0, r1, r5
 800023c:	4290      	cmp	r0, r2
 800023e:	d90a      	bls.n	8000256 <__udivmoddi4+0x62>
 8000240:	eb1c 0202 	adds.w	r2, ip, r2
 8000244:	f101 37ff 	add.w	r7, r1, #4294967295
 8000248:	f080 811c 	bcs.w	8000484 <__udivmoddi4+0x290>
 800024c:	4290      	cmp	r0, r2
 800024e:	f240 8119 	bls.w	8000484 <__udivmoddi4+0x290>
 8000252:	3902      	subs	r1, #2
 8000254:	4462      	add	r2, ip
 8000256:	1a12      	subs	r2, r2, r0
 8000258:	b2a4      	uxth	r4, r4
 800025a:	fbb2 f0fe 	udiv	r0, r2, lr
 800025e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000262:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000266:	fb00 f505 	mul.w	r5, r0, r5
 800026a:	42a5      	cmp	r5, r4
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x90>
 800026e:	eb1c 0404 	adds.w	r4, ip, r4
 8000272:	f100 32ff 	add.w	r2, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x294>
 800027a:	42a5      	cmp	r5, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x294>
 8000280:	4464      	add	r4, ip
 8000282:	3802      	subs	r0, #2
 8000284:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000288:	1b64      	subs	r4, r4, r5
 800028a:	2100      	movs	r1, #0
 800028c:	b11e      	cbz	r6, 8000296 <__udivmoddi4+0xa2>
 800028e:	40dc      	lsrs	r4, r3
 8000290:	2300      	movs	r3, #0
 8000292:	e9c6 4300 	strd	r4, r3, [r6]
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d908      	bls.n	80002b0 <__udivmoddi4+0xbc>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ed 	beq.w	800047e <__udivmoddi4+0x28a>
 80002a4:	2100      	movs	r1, #0
 80002a6:	e9c6 0500 	strd	r0, r5, [r6]
 80002aa:	4608      	mov	r0, r1
 80002ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b0:	fab3 f183 	clz	r1, r3
 80002b4:	2900      	cmp	r1, #0
 80002b6:	d149      	bne.n	800034c <__udivmoddi4+0x158>
 80002b8:	42ab      	cmp	r3, r5
 80002ba:	d302      	bcc.n	80002c2 <__udivmoddi4+0xce>
 80002bc:	4282      	cmp	r2, r0
 80002be:	f200 80f8 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 80002c2:	1a84      	subs	r4, r0, r2
 80002c4:	eb65 0203 	sbc.w	r2, r5, r3
 80002c8:	2001      	movs	r0, #1
 80002ca:	4617      	mov	r7, r2
 80002cc:	2e00      	cmp	r6, #0
 80002ce:	d0e2      	beq.n	8000296 <__udivmoddi4+0xa2>
 80002d0:	e9c6 4700 	strd	r4, r7, [r6]
 80002d4:	e7df      	b.n	8000296 <__udivmoddi4+0xa2>
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xe6>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f382 	clz	r3, r2
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ea:	fa1f fe8c 	uxth.w	lr, ip
 80002ee:	2101      	movs	r1, #1
 80002f0:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f4:	fb07 2015 	mls	r0, r7, r5, r2
 80002f8:	0c22      	lsrs	r2, r4, #16
 80002fa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002fe:	fb0e f005 	mul.w	r0, lr, r5
 8000302:	4290      	cmp	r0, r2
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x124>
 8000306:	eb1c 0202 	adds.w	r2, ip, r2
 800030a:	f105 38ff 	add.w	r8, r5, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x122>
 8000310:	4290      	cmp	r0, r2
 8000312:	f200 80cb 	bhi.w	80004ac <__udivmoddi4+0x2b8>
 8000316:	4645      	mov	r5, r8
 8000318:	1a12      	subs	r2, r2, r0
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000328:	fb0e fe00 	mul.w	lr, lr, r0
 800032c:	45a6      	cmp	lr, r4
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x14e>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 32ff 	add.w	r2, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x14c>
 800033a:	45a6      	cmp	lr, r4
 800033c:	f200 80bb 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 8000340:	4610      	mov	r0, r2
 8000342:	eba4 040e 	sub.w	r4, r4, lr
 8000346:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034a:	e79f      	b.n	800028c <__udivmoddi4+0x98>
 800034c:	f1c1 0720 	rsb	r7, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 fc07 	lsr.w	ip, r2, r7
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa05 f401 	lsl.w	r4, r5, r1
 800035e:	fa20 f307 	lsr.w	r3, r0, r7
 8000362:	40fd      	lsrs	r5, r7
 8000364:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fbb5 f8f9 	udiv	r8, r5, r9
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	fb09 5518 	mls	r5, r9, r8, r5
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800037c:	fb08 f50e 	mul.w	r5, r8, lr
 8000380:	42a5      	cmp	r5, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	fa00 f001 	lsl.w	r0, r0, r1
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b0>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f108 3aff 	add.w	sl, r8, #4294967295
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2b4>
 8000398:	42a5      	cmp	r5, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2b4>
 800039e:	f1a8 0802 	sub.w	r8, r8, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	b29d      	uxth	r5, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1da>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c4:	d26c      	bcs.n	80004a0 <__udivmoddi4+0x2ac>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	d96a      	bls.n	80004a0 <__udivmoddi4+0x2ac>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d2:	fba3 9502 	umull	r9, r5, r3, r2
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	42ac      	cmp	r4, r5
 80003dc:	46c8      	mov	r8, r9
 80003de:	46ae      	mov	lr, r5
 80003e0:	d356      	bcc.n	8000490 <__udivmoddi4+0x29c>
 80003e2:	d053      	beq.n	800048c <__udivmoddi4+0x298>
 80003e4:	b156      	cbz	r6, 80003fc <__udivmoddi4+0x208>
 80003e6:	ebb0 0208 	subs.w	r2, r0, r8
 80003ea:	eb64 040e 	sbc.w	r4, r4, lr
 80003ee:	fa04 f707 	lsl.w	r7, r4, r7
 80003f2:	40ca      	lsrs	r2, r1
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	4317      	orrs	r7, r2
 80003f8:	e9c6 7400 	strd	r7, r4, [r6]
 80003fc:	4618      	mov	r0, r3
 80003fe:	2100      	movs	r1, #0
 8000400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000404:	f1c3 0120 	rsb	r1, r3, #32
 8000408:	fa02 fc03 	lsl.w	ip, r2, r3
 800040c:	fa20 f201 	lsr.w	r2, r0, r1
 8000410:	fa25 f101 	lsr.w	r1, r5, r1
 8000414:	409d      	lsls	r5, r3
 8000416:	432a      	orrs	r2, r5
 8000418:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1510 	mls	r5, r7, r0, r1
 8000428:	0c11      	lsrs	r1, r2, #16
 800042a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800042e:	fb00 f50e 	mul.w	r5, r0, lr
 8000432:	428d      	cmp	r5, r1
 8000434:	fa04 f403 	lsl.w	r4, r4, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x258>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000442:	d22f      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000444:	428d      	cmp	r5, r1
 8000446:	d92d      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 8000448:	3802      	subs	r0, #2
 800044a:	4461      	add	r1, ip
 800044c:	1b49      	subs	r1, r1, r5
 800044e:	b292      	uxth	r2, r2
 8000450:	fbb1 f5f7 	udiv	r5, r1, r7
 8000454:	fb07 1115 	mls	r1, r7, r5, r1
 8000458:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800045c:	fb05 f10e 	mul.w	r1, r5, lr
 8000460:	4291      	cmp	r1, r2
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x282>
 8000464:	eb1c 0202 	adds.w	r2, ip, r2
 8000468:	f105 38ff 	add.w	r8, r5, #4294967295
 800046c:	d216      	bcs.n	800049c <__udivmoddi4+0x2a8>
 800046e:	4291      	cmp	r1, r2
 8000470:	d914      	bls.n	800049c <__udivmoddi4+0x2a8>
 8000472:	3d02      	subs	r5, #2
 8000474:	4462      	add	r2, ip
 8000476:	1a52      	subs	r2, r2, r1
 8000478:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800047c:	e738      	b.n	80002f0 <__udivmoddi4+0xfc>
 800047e:	4631      	mov	r1, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e708      	b.n	8000296 <__udivmoddi4+0xa2>
 8000484:	4639      	mov	r1, r7
 8000486:	e6e6      	b.n	8000256 <__udivmoddi4+0x62>
 8000488:	4610      	mov	r0, r2
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x90>
 800048c:	4548      	cmp	r0, r9
 800048e:	d2a9      	bcs.n	80003e4 <__udivmoddi4+0x1f0>
 8000490:	ebb9 0802 	subs.w	r8, r9, r2
 8000494:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000498:	3b01      	subs	r3, #1
 800049a:	e7a3      	b.n	80003e4 <__udivmoddi4+0x1f0>
 800049c:	4645      	mov	r5, r8
 800049e:	e7ea      	b.n	8000476 <__udivmoddi4+0x282>
 80004a0:	462b      	mov	r3, r5
 80004a2:	e794      	b.n	80003ce <__udivmoddi4+0x1da>
 80004a4:	4640      	mov	r0, r8
 80004a6:	e7d1      	b.n	800044c <__udivmoddi4+0x258>
 80004a8:	46d0      	mov	r8, sl
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b0>
 80004ac:	3d02      	subs	r5, #2
 80004ae:	4462      	add	r2, ip
 80004b0:	e732      	b.n	8000318 <__udivmoddi4+0x124>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e70a      	b.n	80002cc <__udivmoddi4+0xd8>
 80004b6:	4464      	add	r4, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e742      	b.n	8000342 <__udivmoddi4+0x14e>

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ca:	2003      	movs	r0, #3
 80004cc:	f000 f94a 	bl	8000764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 f815 	bl	8000500 <HAL_InitTick>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004dc:	2301      	movs	r3, #1
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	e001      	b.n	80004e6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004e2:	f000 f805 	bl	80004f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004e6:	79fb      	ldrb	r3, [r7, #7]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <HAL_InitTick+0x6c>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d023      	beq.n	800055c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <HAL_InitTick+0x70>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <HAL_InitTick+0x6c>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f941 	bl	80007b2 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d10f      	bne.n	8000556 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0f      	cmp	r3, #15
 800053a:	d809      	bhi.n	8000550 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	f000 f919 	bl	800077a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <HAL_InitTick+0x74>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	e007      	b.n	8000560 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e004      	b.n	8000560 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
 800055a:	e001      	b.n	8000560 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000004 	.word	0x20000004
 8000570:	20000008 	.word	0x20000008
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x20>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x24>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4413      	add	r3, r2
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_IncTick+0x24>)
 800058a:	6013      	str	r3, [r2, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000004 	.word	0x20000004
 800059c:	20000028 	.word	0x20000028

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000028 	.word	0x20000028

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c0:	f7ff ffee 	bl	80005a0 <HAL_GetTick>
 80005c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d005      	beq.n	80005de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <HAL_Delay+0x44>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4413      	add	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005de:	bf00      	nop
 80005e0:	f7ff ffde 	bl	80005a0 <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d8f7      	bhi.n	80005e0 <HAL_Delay+0x28>
  {
  }
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000004 	.word	0x20000004

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	b2da      	uxtb	r2, r3
 800067c:	490c      	ldr	r1, [pc, #48]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	3b04      	subs	r3, #4
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 32ff 	mov.w	r2, #4294967295
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43da      	mvns	r2, r3
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	401a      	ands	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000700:	f04f 31ff 	mov.w	r1, #4294967295
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43d9      	mvns	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000730:	d301      	bcc.n	8000736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2301      	movs	r3, #1
 8000734:	e00f      	b.n	8000756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SysTick_Config+0x40>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f7ff ff8e 	bl	8000664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SysTick_Config+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SysTick_Config+0x40>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff47 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800078c:	f7ff ff5c 	bl	8000648 <__NVIC_GetPriorityGrouping>
 8000790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	6978      	ldr	r0, [r7, #20]
 8000798:	f7ff ff8e 	bl	80006b8 <NVIC_EncodePriority>
 800079c:	4602      	mov	r2, r0
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff5d 	bl	8000664 <__NVIC_SetPriority>
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ffb0 	bl	8000720 <SysTick_Config>
 80007c0:	4603      	mov	r3, r0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b087      	sub	sp, #28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007da:	e17f      	b.n	8000adc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	2101      	movs	r1, #1
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	fa01 f303 	lsl.w	r3, r1, r3
 80007e8:	4013      	ands	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	f000 8171 	beq.w	8000ad6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f003 0303 	and.w	r3, r3, #3
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d005      	beq.n	800080c <HAL_GPIO_Init+0x40>
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f003 0303 	and.w	r3, r3, #3
 8000808:	2b02      	cmp	r3, #2
 800080a:	d130      	bne.n	800086e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	2203      	movs	r2, #3
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	43db      	mvns	r3, r3
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	68da      	ldr	r2, [r3, #12]
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	4313      	orrs	r3, r2
 8000834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000842:	2201      	movs	r2, #1
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43db      	mvns	r3, r3
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	4013      	ands	r3, r2
 8000850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	091b      	lsrs	r3, r3, #4
 8000858:	f003 0201 	and.w	r2, r3, #1
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	4313      	orrs	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f003 0303 	and.w	r3, r3, #3
 8000876:	2b03      	cmp	r3, #3
 8000878:	d118      	bne.n	80008ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000880:	2201      	movs	r2, #1
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	08db      	lsrs	r3, r3, #3
 8000896:	f003 0201 	and.w	r2, r3, #1
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f003 0303 	and.w	r3, r3, #3
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d017      	beq.n	80008e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2203      	movs	r2, #3
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	4013      	ands	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4313      	orrs	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 0303 	and.w	r3, r3, #3
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d123      	bne.n	800093c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	08da      	lsrs	r2, r3, #3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3208      	adds	r2, #8
 80008fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000900:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	f003 0307 	and.w	r3, r3, #7
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	220f      	movs	r2, #15
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4313      	orrs	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	08da      	lsrs	r2, r3, #3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3208      	adds	r2, #8
 8000936:	6939      	ldr	r1, [r7, #16]
 8000938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 0203 	and.w	r2, r3, #3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 80ac 	beq.w	8000ad6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b5f      	ldr	r3, [pc, #380]	; (8000afc <HAL_GPIO_Init+0x330>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	4a5e      	ldr	r2, [pc, #376]	; (8000afc <HAL_GPIO_Init+0x330>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6613      	str	r3, [r2, #96]	; 0x60
 800098a:	4b5c      	ldr	r3, [pc, #368]	; (8000afc <HAL_GPIO_Init+0x330>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000996:	4a5a      	ldr	r2, [pc, #360]	; (8000b00 <HAL_GPIO_Init+0x334>)
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3302      	adds	r3, #2
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	220f      	movs	r2, #15
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009c0:	d025      	beq.n	8000a0e <HAL_GPIO_Init+0x242>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a4f      	ldr	r2, [pc, #316]	; (8000b04 <HAL_GPIO_Init+0x338>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d01f      	beq.n	8000a0a <HAL_GPIO_Init+0x23e>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a4e      	ldr	r2, [pc, #312]	; (8000b08 <HAL_GPIO_Init+0x33c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d019      	beq.n	8000a06 <HAL_GPIO_Init+0x23a>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4d      	ldr	r2, [pc, #308]	; (8000b0c <HAL_GPIO_Init+0x340>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d013      	beq.n	8000a02 <HAL_GPIO_Init+0x236>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4c      	ldr	r2, [pc, #304]	; (8000b10 <HAL_GPIO_Init+0x344>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d00d      	beq.n	80009fe <HAL_GPIO_Init+0x232>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a4b      	ldr	r2, [pc, #300]	; (8000b14 <HAL_GPIO_Init+0x348>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d007      	beq.n	80009fa <HAL_GPIO_Init+0x22e>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4a      	ldr	r2, [pc, #296]	; (8000b18 <HAL_GPIO_Init+0x34c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_GPIO_Init+0x22a>
 80009f2:	2306      	movs	r3, #6
 80009f4:	e00c      	b.n	8000a10 <HAL_GPIO_Init+0x244>
 80009f6:	2307      	movs	r3, #7
 80009f8:	e00a      	b.n	8000a10 <HAL_GPIO_Init+0x244>
 80009fa:	2305      	movs	r3, #5
 80009fc:	e008      	b.n	8000a10 <HAL_GPIO_Init+0x244>
 80009fe:	2304      	movs	r3, #4
 8000a00:	e006      	b.n	8000a10 <HAL_GPIO_Init+0x244>
 8000a02:	2303      	movs	r3, #3
 8000a04:	e004      	b.n	8000a10 <HAL_GPIO_Init+0x244>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e002      	b.n	8000a10 <HAL_GPIO_Init+0x244>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <HAL_GPIO_Init+0x244>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	f002 0203 	and.w	r2, r2, #3
 8000a16:	0092      	lsls	r2, r2, #2
 8000a18:	4093      	lsls	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a20:	4937      	ldr	r1, [pc, #220]	; (8000b00 <HAL_GPIO_Init+0x334>)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a2e:	4b3b      	ldr	r3, [pc, #236]	; (8000b1c <HAL_GPIO_Init+0x350>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a52:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <HAL_GPIO_Init+0x350>)
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a58:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <HAL_GPIO_Init+0x350>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <HAL_GPIO_Init+0x350>)
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <HAL_GPIO_Init+0x350>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000aa6:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <HAL_GPIO_Init+0x350>)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_GPIO_Init+0x350>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ad0:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <HAL_GPIO_Init+0x350>)
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f47f ae78 	bne.w	80007dc <HAL_GPIO_Init+0x10>
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	371c      	adds	r7, #28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010000 	.word	0x40010000
 8000b04:	48000400 	.word	0x48000400
 8000b08:	48000800 	.word	0x48000800
 8000b0c:	48000c00 	.word	0x48000c00
 8000b10:	48001000 	.word	0x48001000
 8000b14:	48001400 	.word	0x48001400
 8000b18:	48001800 	.word	0x48001800
 8000b1c:	40010400 	.word	0x40010400

08000b20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40007000 	.word	0x40007000

08000b3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d101      	bne.n	8000b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e3ca      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b4e:	4b97      	ldr	r3, [pc, #604]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b58:	4b94      	ldr	r3, [pc, #592]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 80e4 	beq.w	8000d38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d007      	beq.n	8000b86 <HAL_RCC_OscConfig+0x4a>
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	2b0c      	cmp	r3, #12
 8000b7a:	f040 808b 	bne.w	8000c94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	f040 8087 	bne.w	8000c94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b86:	4b89      	ldr	r3, [pc, #548]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d005      	beq.n	8000b9e <HAL_RCC_OscConfig+0x62>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e3a2      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a1a      	ldr	r2, [r3, #32]
 8000ba2:	4b82      	ldr	r3, [pc, #520]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d004      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x7c>
 8000bae:	4b7f      	ldr	r3, [pc, #508]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bb6:	e005      	b.n	8000bc4 <HAL_RCC_OscConfig+0x88>
 8000bb8:	4b7c      	ldr	r3, [pc, #496]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d223      	bcs.n	8000c10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fd55 	bl	800167c <RCC_SetFlashLatencyFromMSIRange>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e383      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bdc:	4b73      	ldr	r3, [pc, #460]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a72      	ldr	r2, [pc, #456]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	4b70      	ldr	r3, [pc, #448]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	496d      	ldr	r1, [pc, #436]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bfa:	4b6c      	ldr	r3, [pc, #432]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	4968      	ldr	r1, [pc, #416]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	604b      	str	r3, [r1, #4]
 8000c0e:	e025      	b.n	8000c5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c10:	4b66      	ldr	r3, [pc, #408]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a65      	ldr	r2, [pc, #404]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000c16:	f043 0308 	orr.w	r3, r3, #8
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b63      	ldr	r3, [pc, #396]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	4960      	ldr	r1, [pc, #384]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c2e:	4b5f      	ldr	r3, [pc, #380]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	495b      	ldr	r1, [pc, #364]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d109      	bne.n	8000c5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 fd15 	bl	800167c <RCC_SetFlashLatencyFromMSIRange>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e343      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c5c:	f000 fc4a 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8000c60:	4602      	mov	r2, r0
 8000c62:	4b52      	ldr	r3, [pc, #328]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	091b      	lsrs	r3, r3, #4
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	4950      	ldr	r1, [pc, #320]	; (8000db0 <HAL_RCC_OscConfig+0x274>)
 8000c6e:	5ccb      	ldrb	r3, [r1, r3]
 8000c70:	f003 031f 	and.w	r3, r3, #31
 8000c74:	fa22 f303 	lsr.w	r3, r2, r3
 8000c78:	4a4e      	ldr	r2, [pc, #312]	; (8000db4 <HAL_RCC_OscConfig+0x278>)
 8000c7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000c7c:	4b4e      	ldr	r3, [pc, #312]	; (8000db8 <HAL_RCC_OscConfig+0x27c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fc3d 	bl	8000500 <HAL_InitTick>
 8000c86:	4603      	mov	r3, r0
 8000c88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d052      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	e327      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d032      	beq.n	8000d02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000c9c:	4b43      	ldr	r3, [pc, #268]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a42      	ldr	r2, [pc, #264]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ca8:	f7ff fc7a 	bl	80005a0 <HAL_GetTick>
 8000cac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cae:	e008      	b.n	8000cc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cb0:	f7ff fc76 	bl	80005a0 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d901      	bls.n	8000cc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e310      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cc2:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f0      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cce:	4b37      	ldr	r3, [pc, #220]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a36      	ldr	r2, [pc, #216]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	4931      	ldr	r1, [pc, #196]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	492c      	ldr	r1, [pc, #176]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]
 8000d00:	e01a      	b.n	8000d38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a29      	ldr	r2, [pc, #164]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000d08:	f023 0301 	bic.w	r3, r3, #1
 8000d0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fc47 	bl	80005a0 <HAL_GetTick>
 8000d12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d16:	f7ff fc43 	bl	80005a0 <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e2dd      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f0      	bne.n	8000d16 <HAL_RCC_OscConfig+0x1da>
 8000d34:	e000      	b.n	8000d38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d074      	beq.n	8000e2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d005      	beq.n	8000d56 <HAL_RCC_OscConfig+0x21a>
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	2b0c      	cmp	r3, #12
 8000d4e:	d10e      	bne.n	8000d6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d10b      	bne.n	8000d6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d064      	beq.n	8000e2c <HAL_RCC_OscConfig+0x2f0>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d160      	bne.n	8000e2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e2ba      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d76:	d106      	bne.n	8000d86 <HAL_RCC_OscConfig+0x24a>
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e026      	b.n	8000dd4 <HAL_RCC_OscConfig+0x298>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d8e:	d115      	bne.n	8000dbc <HAL_RCC_OscConfig+0x280>
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a05      	ldr	r2, [pc, #20]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000d96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a02      	ldr	r2, [pc, #8]	; (8000dac <HAL_RCC_OscConfig+0x270>)
 8000da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e014      	b.n	8000dd4 <HAL_RCC_OscConfig+0x298>
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	08002544 	.word	0x08002544
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	4ba0      	ldr	r3, [pc, #640]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a9f      	ldr	r2, [pc, #636]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b9d      	ldr	r3, [pc, #628]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a9c      	ldr	r2, [pc, #624]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d013      	beq.n	8000e04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fbe0 	bl	80005a0 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fbdc 	bl	80005a0 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b64      	cmp	r3, #100	; 0x64
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e276      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000df6:	4b92      	ldr	r3, [pc, #584]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f0      	beq.n	8000de4 <HAL_RCC_OscConfig+0x2a8>
 8000e02:	e014      	b.n	8000e2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e04:	f7ff fbcc 	bl	80005a0 <HAL_GetTick>
 8000e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e0a:	e008      	b.n	8000e1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e0c:	f7ff fbc8 	bl	80005a0 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b64      	cmp	r3, #100	; 0x64
 8000e18:	d901      	bls.n	8000e1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e262      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e1e:	4b88      	ldr	r3, [pc, #544]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f0      	bne.n	8000e0c <HAL_RCC_OscConfig+0x2d0>
 8000e2a:	e000      	b.n	8000e2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d060      	beq.n	8000efc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d005      	beq.n	8000e4c <HAL_RCC_OscConfig+0x310>
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2b0c      	cmp	r3, #12
 8000e44:	d119      	bne.n	8000e7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d116      	bne.n	8000e7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e4c:	4b7c      	ldr	r3, [pc, #496]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d005      	beq.n	8000e64 <HAL_RCC_OscConfig+0x328>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e23f      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e64:	4b76      	ldr	r3, [pc, #472]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	061b      	lsls	r3, r3, #24
 8000e72:	4973      	ldr	r1, [pc, #460]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e78:	e040      	b.n	8000efc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d023      	beq.n	8000eca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e82:	4b6f      	ldr	r3, [pc, #444]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a6e      	ldr	r2, [pc, #440]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fb87 	bl	80005a0 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e96:	f7ff fb83 	bl	80005a0 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e21d      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ea8:	4b65      	ldr	r3, [pc, #404]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f0      	beq.n	8000e96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb4:	4b62      	ldr	r3, [pc, #392]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	061b      	lsls	r3, r3, #24
 8000ec2:	495f      	ldr	r1, [pc, #380]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	604b      	str	r3, [r1, #4]
 8000ec8:	e018      	b.n	8000efc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eca:	4b5d      	ldr	r3, [pc, #372]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a5c      	ldr	r2, [pc, #368]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fb63 	bl	80005a0 <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ede:	f7ff fb5f 	bl	80005a0 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e1f9      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ef0:	4b53      	ldr	r3, [pc, #332]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f0      	bne.n	8000ede <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d03c      	beq.n	8000f82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d01c      	beq.n	8000f4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f10:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f16:	4a4a      	ldr	r2, [pc, #296]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f20:	f7ff fb3e 	bl	80005a0 <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f28:	f7ff fb3a 	bl	80005a0 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e1d4      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f3a:	4b41      	ldr	r3, [pc, #260]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0ef      	beq.n	8000f28 <HAL_RCC_OscConfig+0x3ec>
 8000f48:	e01b      	b.n	8000f82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f50:	4a3b      	ldr	r2, [pc, #236]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000f52:	f023 0301 	bic.w	r3, r3, #1
 8000f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fb21 	bl	80005a0 <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f62:	f7ff fb1d 	bl	80005a0 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e1b7      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1ef      	bne.n	8000f62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 80a6 	beq.w	80010dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f90:	2300      	movs	r3, #0
 8000f92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10d      	bne.n	8000fbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	4a26      	ldr	r2, [pc, #152]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000faa:	6593      	str	r3, [r2, #88]	; 0x58
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8000fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <HAL_RCC_OscConfig+0x508>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d118      	bne.n	8000ffa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <HAL_RCC_OscConfig+0x508>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_RCC_OscConfig+0x508>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fae4 	bl	80005a0 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fdc:	f7ff fae0 	bl	80005a0 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e17a      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_RCC_OscConfig+0x508>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d108      	bne.n	8001014 <HAL_RCC_OscConfig+0x4d8>
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8001004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001012:	e029      	b.n	8001068 <HAL_RCC_OscConfig+0x52c>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2b05      	cmp	r3, #5
 800101a:	d115      	bne.n	8001048 <HAL_RCC_OscConfig+0x50c>
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 800101e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001022:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 800102e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001032:	4a03      	ldr	r2, [pc, #12]	; (8001040 <HAL_RCC_OscConfig+0x504>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800103c:	e014      	b.n	8001068 <HAL_RCC_OscConfig+0x52c>
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000
 8001044:	40007000 	.word	0x40007000
 8001048:	4b9c      	ldr	r3, [pc, #624]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 800104a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800104e:	4a9b      	ldr	r2, [pc, #620]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001058:	4b98      	ldr	r3, [pc, #608]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 800105a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800105e:	4a97      	ldr	r2, [pc, #604]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001060:	f023 0304 	bic.w	r3, r3, #4
 8001064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d016      	beq.n	800109e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001070:	f7ff fa96 	bl	80005a0 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001076:	e00a      	b.n	800108e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001078:	f7ff fa92 	bl	80005a0 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	f241 3288 	movw	r2, #5000	; 0x1388
 8001086:	4293      	cmp	r3, r2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e12a      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800108e:	4b8b      	ldr	r3, [pc, #556]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0ed      	beq.n	8001078 <HAL_RCC_OscConfig+0x53c>
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109e:	f7ff fa7f 	bl	80005a0 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010a4:	e00a      	b.n	80010bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a6:	f7ff fa7b 	bl	80005a0 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e113      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010bc:	4b7f      	ldr	r3, [pc, #508]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 80010be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1ed      	bne.n	80010a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010ca:	7ffb      	ldrb	r3, [r7, #31]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d105      	bne.n	80010dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d0:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d4:	4a79      	ldr	r2, [pc, #484]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 80010d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80fe 	beq.w	80012e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	f040 80d0 	bne.w	8001290 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80010f0:	4b72      	ldr	r3, [pc, #456]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f003 0203 	and.w	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001100:	429a      	cmp	r2, r3
 8001102:	d130      	bne.n	8001166 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	3b01      	subs	r3, #1
 8001110:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001112:	429a      	cmp	r2, r3
 8001114:	d127      	bne.n	8001166 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001120:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001122:	429a      	cmp	r2, r3
 8001124:	d11f      	bne.n	8001166 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001130:	2a07      	cmp	r2, #7
 8001132:	bf14      	ite	ne
 8001134:	2201      	movne	r2, #1
 8001136:	2200      	moveq	r2, #0
 8001138:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800113a:	4293      	cmp	r3, r2
 800113c:	d113      	bne.n	8001166 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001148:	085b      	lsrs	r3, r3, #1
 800114a:	3b01      	subs	r3, #1
 800114c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800114e:	429a      	cmp	r2, r3
 8001150:	d109      	bne.n	8001166 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	085b      	lsrs	r3, r3, #1
 800115e:	3b01      	subs	r3, #1
 8001160:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001162:	429a      	cmp	r2, r3
 8001164:	d06e      	beq.n	8001244 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d069      	beq.n	8001240 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d105      	bne.n	8001184 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0ad      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001188:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 800118e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001192:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001194:	f7ff fa04 	bl	80005a0 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119c:	f7ff fa00 	bl	80005a0 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e09a      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011ae:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <HAL_RCC_OscConfig+0x784>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011ca:	3a01      	subs	r2, #1
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	4311      	orrs	r1, r2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011d4:	0212      	lsls	r2, r2, #8
 80011d6:	4311      	orrs	r1, r2
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80011dc:	0852      	lsrs	r2, r2, #1
 80011de:	3a01      	subs	r2, #1
 80011e0:	0552      	lsls	r2, r2, #21
 80011e2:	4311      	orrs	r1, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011e8:	0852      	lsrs	r2, r2, #1
 80011ea:	3a01      	subs	r2, #1
 80011ec:	0652      	lsls	r2, r2, #25
 80011ee:	4311      	orrs	r1, r2
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80011f4:	0912      	lsrs	r2, r2, #4
 80011f6:	0452      	lsls	r2, r2, #17
 80011f8:	430a      	orrs	r2, r1
 80011fa:	4930      	ldr	r1, [pc, #192]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a2d      	ldr	r2, [pc, #180]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800120a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4a2a      	ldr	r2, [pc, #168]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001216:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001218:	f7ff f9c2 	bl	80005a0 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001220:	f7ff f9be 	bl	80005a0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e058      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800123e:	e050      	b.n	80012e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e04f      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d148      	bne.n	80012e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800125a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4a16      	ldr	r2, [pc, #88]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001266:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001268:	f7ff f99a 	bl	80005a0 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff f996 	bl	80005a0 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e030      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x734>
 800128e:	e028      	b.n	80012e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2b0c      	cmp	r3, #12
 8001294:	d023      	beq.n	80012de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_RCC_OscConfig+0x780>)
 800129c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a2:	f7ff f97d 	bl	80005a0 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a8:	e00c      	b.n	80012c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff f979 	bl	80005a0 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d905      	bls.n	80012c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e013      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_RCC_OscConfig+0x7b0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1ec      	bne.n	80012aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_RCC_OscConfig+0x7b0>)
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	4905      	ldr	r1, [pc, #20]	; (80012ec <HAL_RCC_OscConfig+0x7b0>)
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_RCC_OscConfig+0x7b4>)
 80012d8:	4013      	ands	r3, r2
 80012da:	60cb      	str	r3, [r1, #12]
 80012dc:	e001      	b.n	80012e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000
 80012f0:	feeefffc 	.word	0xfeeefffc

080012f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e0e7      	b.n	80014d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001308:	4b75      	ldr	r3, [pc, #468]	; (80014e0 <HAL_RCC_ClockConfig+0x1ec>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d910      	bls.n	8001338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 0207 	bic.w	r2, r3, #7
 800131e:	4970      	ldr	r1, [pc, #448]	; (80014e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b6e      	ldr	r3, [pc, #440]	; (80014e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e0cf      	b.n	80014d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d010      	beq.n	8001366 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001350:	429a      	cmp	r2, r3
 8001352:	d908      	bls.n	8001366 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001354:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	4960      	ldr	r1, [pc, #384]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001362:	4313      	orrs	r3, r2
 8001364:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d04c      	beq.n	800140c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137a:	4b5a      	ldr	r3, [pc, #360]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d121      	bne.n	80013ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0a6      	b.n	80014d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001392:	4b54      	ldr	r3, [pc, #336]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d115      	bne.n	80013ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e09a      	b.n	80014d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013aa:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e08e      	b.n	80014d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ba:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e086      	b.n	80014d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013ca:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f023 0203 	bic.w	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4943      	ldr	r1, [pc, #268]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013dc:	f7ff f8e0 	bl	80005a0 <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e4:	f7ff f8dc 	bl	80005a0 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e06e      	b.n	80014d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 020c 	and.w	r2, r3, #12
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	429a      	cmp	r2, r3
 800140a:	d1eb      	bne.n	80013e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d010      	beq.n	800143a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001424:	429a      	cmp	r2, r3
 8001426:	d208      	bcs.n	800143a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	492b      	ldr	r1, [pc, #172]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001436:	4313      	orrs	r3, r2
 8001438:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <HAL_RCC_ClockConfig+0x1ec>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d210      	bcs.n	800146a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_RCC_ClockConfig+0x1ec>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 0207 	bic.w	r2, r3, #7
 8001450:	4923      	ldr	r1, [pc, #140]	; (80014e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <HAL_RCC_ClockConfig+0x1ec>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d001      	beq.n	800146a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e036      	b.n	80014d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d008      	beq.n	8001488 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	4918      	ldr	r1, [pc, #96]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001484:	4313      	orrs	r3, r2
 8001486:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4910      	ldr	r1, [pc, #64]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014a8:	f000 f824 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_RCC_ClockConfig+0x1f0>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	490b      	ldr	r1, [pc, #44]	; (80014e8 <HAL_RCC_ClockConfig+0x1f4>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	4a09      	ldr	r2, [pc, #36]	; (80014ec <HAL_RCC_ClockConfig+0x1f8>)
 80014c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_ClockConfig+0x1fc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f817 	bl	8000500 <HAL_InitTick>
 80014d2:	4603      	mov	r3, r0
 80014d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80014d6:	7afb      	ldrb	r3, [r7, #11]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40022000 	.word	0x40022000
 80014e4:	40021000 	.word	0x40021000
 80014e8:	08002544 	.word	0x08002544
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000000 	.word	0x20000000

080014f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001502:	4b3e      	ldr	r3, [pc, #248]	; (80015fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800150c:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_RCC_GetSysClockFreq+0x108>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x34>
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	2b0c      	cmp	r3, #12
 8001520:	d121      	bne.n	8001566 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d11e      	bne.n	8001566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <HAL_RCC_GetSysClockFreq+0x108>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d107      	bne.n	8001544 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001534:	4b31      	ldr	r3, [pc, #196]	; (80015fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e005      	b.n	8001550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10d      	bne.n	800157c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001564:	e00a      	b.n	800157c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	2b04      	cmp	r3, #4
 800156a:	d102      	bne.n	8001572 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <HAL_RCC_GetSysClockFreq+0x110>)
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	e004      	b.n	800157c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	2b08      	cmp	r3, #8
 8001576:	d101      	bne.n	800157c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_RCC_GetSysClockFreq+0x114>)
 800157a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	2b0c      	cmp	r3, #12
 8001580:	d134      	bne.n	80015ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d003      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0xa6>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d003      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0xac>
 8001598:	e005      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_RCC_GetSysClockFreq+0x110>)
 800159c:	617b      	str	r3, [r7, #20]
      break;
 800159e:	e005      	b.n	80015ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_RCC_GetSysClockFreq+0x114>)
 80015a2:	617b      	str	r3, [r7, #20]
      break;
 80015a4:	e002      	b.n	80015ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	617b      	str	r3, [r7, #20]
      break;
 80015aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <HAL_RCC_GetSysClockFreq+0x108>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	3301      	adds	r3, #1
 80015b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_RCC_GetSysClockFreq+0x108>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	fb03 f202 	mul.w	r2, r3, r2
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_RCC_GetSysClockFreq+0x108>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	0e5b      	lsrs	r3, r3, #25
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	3301      	adds	r3, #1
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80015ec:	69bb      	ldr	r3, [r7, #24]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	0800255c 	.word	0x0800255c
 8001604:	00f42400 	.word	0x00f42400
 8001608:	007a1200 	.word	0x007a1200

0800160c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_RCC_GetHCLKFreq+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008

08001624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001628:	f7ff fff0 	bl	800160c <HAL_RCC_GetHCLKFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	4904      	ldr	r1, [pc, #16]	; (800164c <HAL_RCC_GetPCLK1Freq+0x28>)
 800163a:	5ccb      	ldrb	r3, [r1, r3]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001644:	4618      	mov	r0, r3
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	08002554 	.word	0x08002554

08001650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001654:	f7ff ffda 	bl	800160c <HAL_RCC_GetHCLKFreq>
 8001658:	4602      	mov	r2, r0
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	0adb      	lsrs	r3, r3, #11
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	4904      	ldr	r1, [pc, #16]	; (8001678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	08002554 	.word	0x08002554

0800167c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001694:	f7ff fa44 	bl	8000b20 <HAL_PWREx_GetVoltageRange>
 8001698:	6178      	str	r0, [r7, #20]
 800169a:	e014      	b.n	80016c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	4a24      	ldr	r2, [pc, #144]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a6:	6593      	str	r3, [r2, #88]	; 0x58
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80016b4:	f7ff fa34 	bl	8000b20 <HAL_PWREx_GetVoltageRange>
 80016b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016cc:	d10b      	bne.n	80016e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b80      	cmp	r3, #128	; 0x80
 80016d2:	d919      	bls.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2ba0      	cmp	r3, #160	; 0xa0
 80016d8:	d902      	bls.n	80016e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016da:	2302      	movs	r3, #2
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	e013      	b.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016e0:	2301      	movs	r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	e010      	b.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b80      	cmp	r3, #128	; 0x80
 80016ea:	d902      	bls.n	80016f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80016ec:	2303      	movs	r3, #3
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	e00a      	b.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b80      	cmp	r3, #128	; 0x80
 80016f6:	d102      	bne.n	80016fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016f8:	2302      	movs	r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	e004      	b.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b70      	cmp	r3, #112	; 0x70
 8001702:	d101      	bne.n	8001708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 0207 	bic.w	r2, r3, #7
 8001710:	4909      	ldr	r1, [pc, #36]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	40022000 	.word	0x40022000

0800173c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e040      	b.n	80017d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d106      	bne.n	8001764 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f83a 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2224      	movs	r2, #36	; 0x24
 8001768:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fb74 	bl	8001e70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8b9 	bl	8001900 <UART_SetConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e01b      	b.n	80017d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 fbf3 	bl	8001fb4 <UART_CheckIdleState>
 80017ce:	4603      	mov	r3, r0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001800:	2b20      	cmp	r3, #32
 8001802:	d178      	bne.n	80018f6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <HAL_UART_Transmit+0x24>
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e071      	b.n	80018f8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2221      	movs	r2, #33	; 0x21
 8001820:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001822:	f7fe febd 	bl	80005a0 <HAL_GetTick>
 8001826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	88fa      	ldrh	r2, [r7, #6]
 8001834:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001840:	d108      	bne.n	8001854 <HAL_UART_Transmit+0x68>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d104      	bne.n	8001854 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	e003      	b.n	800185c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800185c:	e030      	b.n	80018c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2200      	movs	r2, #0
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 fc4b 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2220      	movs	r2, #32
 8001878:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e03c      	b.n	80018f8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	881a      	ldrh	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001890:	b292      	uxth	r2, r2
 8001892:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	3302      	adds	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	e008      	b.n	80018ae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b292      	uxth	r2, r2
 80018a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	3301      	adds	r3, #1
 80018ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1c8      	bne.n	800185e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2200      	movs	r2, #0
 80018d4:	2140      	movs	r1, #64	; 0x40
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 fc14 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d004      	beq.n	80018ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2220      	movs	r2, #32
 80018e6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e005      	b.n	80018f8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2220      	movs	r2, #32
 80018f0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80018f6:	2302      	movs	r3, #2
  }
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001904:	b08a      	sub	sp, #40	; 0x28
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	431a      	orrs	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	431a      	orrs	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	4313      	orrs	r3, r2
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4ba4      	ldr	r3, [pc, #656]	; (8001bc0 <UART_SetConfig+0x2c0>)
 8001930:	4013      	ands	r3, r2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001938:	430b      	orrs	r3, r1
 800193a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a99      	ldr	r2, [pc, #612]	; (8001bc4 <UART_SetConfig+0x2c4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d004      	beq.n	800196c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001968:	4313      	orrs	r3, r2
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	430a      	orrs	r2, r1
 800197e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a90      	ldr	r2, [pc, #576]	; (8001bc8 <UART_SetConfig+0x2c8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d126      	bne.n	80019d8 <UART_SetConfig+0xd8>
 800198a:	4b90      	ldr	r3, [pc, #576]	; (8001bcc <UART_SetConfig+0x2cc>)
 800198c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b03      	cmp	r3, #3
 8001996:	d81b      	bhi.n	80019d0 <UART_SetConfig+0xd0>
 8001998:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <UART_SetConfig+0xa0>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	080019b1 	.word	0x080019b1
 80019a4:	080019c1 	.word	0x080019c1
 80019a8:	080019b9 	.word	0x080019b9
 80019ac:	080019c9 	.word	0x080019c9
 80019b0:	2301      	movs	r3, #1
 80019b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019b6:	e116      	b.n	8001be6 <UART_SetConfig+0x2e6>
 80019b8:	2302      	movs	r3, #2
 80019ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019be:	e112      	b.n	8001be6 <UART_SetConfig+0x2e6>
 80019c0:	2304      	movs	r3, #4
 80019c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019c6:	e10e      	b.n	8001be6 <UART_SetConfig+0x2e6>
 80019c8:	2308      	movs	r3, #8
 80019ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019ce:	e10a      	b.n	8001be6 <UART_SetConfig+0x2e6>
 80019d0:	2310      	movs	r3, #16
 80019d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019d6:	e106      	b.n	8001be6 <UART_SetConfig+0x2e6>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a7c      	ldr	r2, [pc, #496]	; (8001bd0 <UART_SetConfig+0x2d0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d138      	bne.n	8001a54 <UART_SetConfig+0x154>
 80019e2:	4b7a      	ldr	r3, [pc, #488]	; (8001bcc <UART_SetConfig+0x2cc>)
 80019e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b0c      	cmp	r3, #12
 80019ee:	d82d      	bhi.n	8001a4c <UART_SetConfig+0x14c>
 80019f0:	a201      	add	r2, pc, #4	; (adr r2, 80019f8 <UART_SetConfig+0xf8>)
 80019f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f6:	bf00      	nop
 80019f8:	08001a2d 	.word	0x08001a2d
 80019fc:	08001a4d 	.word	0x08001a4d
 8001a00:	08001a4d 	.word	0x08001a4d
 8001a04:	08001a4d 	.word	0x08001a4d
 8001a08:	08001a3d 	.word	0x08001a3d
 8001a0c:	08001a4d 	.word	0x08001a4d
 8001a10:	08001a4d 	.word	0x08001a4d
 8001a14:	08001a4d 	.word	0x08001a4d
 8001a18:	08001a35 	.word	0x08001a35
 8001a1c:	08001a4d 	.word	0x08001a4d
 8001a20:	08001a4d 	.word	0x08001a4d
 8001a24:	08001a4d 	.word	0x08001a4d
 8001a28:	08001a45 	.word	0x08001a45
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001a32:	e0d8      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a34:	2302      	movs	r3, #2
 8001a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001a3a:	e0d4      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001a42:	e0d0      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a44:	2308      	movs	r3, #8
 8001a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001a4a:	e0cc      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001a52:	e0c8      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a5e      	ldr	r2, [pc, #376]	; (8001bd4 <UART_SetConfig+0x2d4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d125      	bne.n	8001aaa <UART_SetConfig+0x1aa>
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	; (8001bcc <UART_SetConfig+0x2cc>)
 8001a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a68:	2b30      	cmp	r3, #48	; 0x30
 8001a6a:	d016      	beq.n	8001a9a <UART_SetConfig+0x19a>
 8001a6c:	2b30      	cmp	r3, #48	; 0x30
 8001a6e:	d818      	bhi.n	8001aa2 <UART_SetConfig+0x1a2>
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d00a      	beq.n	8001a8a <UART_SetConfig+0x18a>
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d814      	bhi.n	8001aa2 <UART_SetConfig+0x1a2>
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <UART_SetConfig+0x182>
 8001a7c:	2b10      	cmp	r3, #16
 8001a7e:	d008      	beq.n	8001a92 <UART_SetConfig+0x192>
 8001a80:	e00f      	b.n	8001aa2 <UART_SetConfig+0x1a2>
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001a88:	e0ad      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001a90:	e0a9      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a92:	2304      	movs	r3, #4
 8001a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001a98:	e0a5      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001aa0:	e0a1      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001aa2:	2310      	movs	r3, #16
 8001aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001aa8:	e09d      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a4a      	ldr	r2, [pc, #296]	; (8001bd8 <UART_SetConfig+0x2d8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d125      	bne.n	8001b00 <UART_SetConfig+0x200>
 8001ab4:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <UART_SetConfig+0x2cc>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001abe:	2bc0      	cmp	r3, #192	; 0xc0
 8001ac0:	d016      	beq.n	8001af0 <UART_SetConfig+0x1f0>
 8001ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8001ac4:	d818      	bhi.n	8001af8 <UART_SetConfig+0x1f8>
 8001ac6:	2b80      	cmp	r3, #128	; 0x80
 8001ac8:	d00a      	beq.n	8001ae0 <UART_SetConfig+0x1e0>
 8001aca:	2b80      	cmp	r3, #128	; 0x80
 8001acc:	d814      	bhi.n	8001af8 <UART_SetConfig+0x1f8>
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <UART_SetConfig+0x1d8>
 8001ad2:	2b40      	cmp	r3, #64	; 0x40
 8001ad4:	d008      	beq.n	8001ae8 <UART_SetConfig+0x1e8>
 8001ad6:	e00f      	b.n	8001af8 <UART_SetConfig+0x1f8>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001ade:	e082      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001ae6:	e07e      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001ae8:	2304      	movs	r3, #4
 8001aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001aee:	e07a      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001af0:	2308      	movs	r3, #8
 8001af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001af6:	e076      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001af8:	2310      	movs	r3, #16
 8001afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001afe:	e072      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a35      	ldr	r2, [pc, #212]	; (8001bdc <UART_SetConfig+0x2dc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12a      	bne.n	8001b60 <UART_SetConfig+0x260>
 8001b0a:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <UART_SetConfig+0x2cc>)
 8001b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b18:	d01a      	beq.n	8001b50 <UART_SetConfig+0x250>
 8001b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b1e:	d81b      	bhi.n	8001b58 <UART_SetConfig+0x258>
 8001b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b24:	d00c      	beq.n	8001b40 <UART_SetConfig+0x240>
 8001b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b2a:	d815      	bhi.n	8001b58 <UART_SetConfig+0x258>
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <UART_SetConfig+0x238>
 8001b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b34:	d008      	beq.n	8001b48 <UART_SetConfig+0x248>
 8001b36:	e00f      	b.n	8001b58 <UART_SetConfig+0x258>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001b3e:	e052      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b40:	2302      	movs	r3, #2
 8001b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001b46:	e04e      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b48:	2304      	movs	r3, #4
 8001b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001b4e:	e04a      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b50:	2308      	movs	r3, #8
 8001b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001b56:	e046      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b58:	2310      	movs	r3, #16
 8001b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001b5e:	e042      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <UART_SetConfig+0x2c4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d13a      	bne.n	8001be0 <UART_SetConfig+0x2e0>
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <UART_SetConfig+0x2cc>)
 8001b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001b78:	d01a      	beq.n	8001bb0 <UART_SetConfig+0x2b0>
 8001b7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001b7e:	d81b      	bhi.n	8001bb8 <UART_SetConfig+0x2b8>
 8001b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b84:	d00c      	beq.n	8001ba0 <UART_SetConfig+0x2a0>
 8001b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b8a:	d815      	bhi.n	8001bb8 <UART_SetConfig+0x2b8>
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <UART_SetConfig+0x298>
 8001b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b94:	d008      	beq.n	8001ba8 <UART_SetConfig+0x2a8>
 8001b96:	e00f      	b.n	8001bb8 <UART_SetConfig+0x2b8>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001b9e:	e022      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001ba6:	e01e      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001ba8:	2304      	movs	r3, #4
 8001baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001bae:	e01a      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001bb6:	e016      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001bb8:	2310      	movs	r3, #16
 8001bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001bbe:	e012      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001bc0:	efff69f3 	.word	0xefff69f3
 8001bc4:	40008000 	.word	0x40008000
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40004400 	.word	0x40004400
 8001bd4:	40004800 	.word	0x40004800
 8001bd8:	40004c00 	.word	0x40004c00
 8001bdc:	40005000 	.word	0x40005000
 8001be0:	2310      	movs	r3, #16
 8001be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a9f      	ldr	r2, [pc, #636]	; (8001e68 <UART_SetConfig+0x568>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d17a      	bne.n	8001ce6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d824      	bhi.n	8001c42 <UART_SetConfig+0x342>
 8001bf8:	a201      	add	r2, pc, #4	; (adr r2, 8001c00 <UART_SetConfig+0x300>)
 8001bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfe:	bf00      	nop
 8001c00:	08001c25 	.word	0x08001c25
 8001c04:	08001c43 	.word	0x08001c43
 8001c08:	08001c2d 	.word	0x08001c2d
 8001c0c:	08001c43 	.word	0x08001c43
 8001c10:	08001c33 	.word	0x08001c33
 8001c14:	08001c43 	.word	0x08001c43
 8001c18:	08001c43 	.word	0x08001c43
 8001c1c:	08001c43 	.word	0x08001c43
 8001c20:	08001c3b 	.word	0x08001c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c24:	f7ff fcfe 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 8001c28:	61f8      	str	r0, [r7, #28]
        break;
 8001c2a:	e010      	b.n	8001c4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001c2c:	4b8f      	ldr	r3, [pc, #572]	; (8001e6c <UART_SetConfig+0x56c>)
 8001c2e:	61fb      	str	r3, [r7, #28]
        break;
 8001c30:	e00d      	b.n	8001c4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c32:	f7ff fc5f 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001c36:	61f8      	str	r0, [r7, #28]
        break;
 8001c38:	e009      	b.n	8001c4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c3e:	61fb      	str	r3, [r7, #28]
        break;
 8001c40:	e005      	b.n	8001c4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8001c4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80fb 	beq.w	8001e4c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d305      	bcc.n	8001c72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d903      	bls.n	8001c7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001c78:	e0e8      	b.n	8001e4c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	461c      	mov	r4, r3
 8001c80:	4615      	mov	r5, r2
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	022b      	lsls	r3, r5, #8
 8001c8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001c90:	0222      	lsls	r2, r4, #8
 8001c92:	68f9      	ldr	r1, [r7, #12]
 8001c94:	6849      	ldr	r1, [r1, #4]
 8001c96:	0849      	lsrs	r1, r1, #1
 8001c98:	2000      	movs	r0, #0
 8001c9a:	4688      	mov	r8, r1
 8001c9c:	4681      	mov	r9, r0
 8001c9e:	eb12 0a08 	adds.w	sl, r2, r8
 8001ca2:	eb43 0b09 	adc.w	fp, r3, r9
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cb4:	4650      	mov	r0, sl
 8001cb6:	4659      	mov	r1, fp
 8001cb8:	f7fe fa84 	bl	80001c4 <__aeabi_uldivmod>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cca:	d308      	bcc.n	8001cde <UART_SetConfig+0x3de>
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cd2:	d204      	bcs.n	8001cde <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	e0b6      	b.n	8001e4c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001ce4:	e0b2      	b.n	8001e4c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cee:	d15e      	bne.n	8001dae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8001cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d828      	bhi.n	8001d4a <UART_SetConfig+0x44a>
 8001cf8:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <UART_SetConfig+0x400>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d25 	.word	0x08001d25
 8001d04:	08001d2d 	.word	0x08001d2d
 8001d08:	08001d35 	.word	0x08001d35
 8001d0c:	08001d4b 	.word	0x08001d4b
 8001d10:	08001d3b 	.word	0x08001d3b
 8001d14:	08001d4b 	.word	0x08001d4b
 8001d18:	08001d4b 	.word	0x08001d4b
 8001d1c:	08001d4b 	.word	0x08001d4b
 8001d20:	08001d43 	.word	0x08001d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d24:	f7ff fc7e 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 8001d28:	61f8      	str	r0, [r7, #28]
        break;
 8001d2a:	e014      	b.n	8001d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001d2c:	f7ff fc90 	bl	8001650 <HAL_RCC_GetPCLK2Freq>
 8001d30:	61f8      	str	r0, [r7, #28]
        break;
 8001d32:	e010      	b.n	8001d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d34:	4b4d      	ldr	r3, [pc, #308]	; (8001e6c <UART_SetConfig+0x56c>)
 8001d36:	61fb      	str	r3, [r7, #28]
        break;
 8001d38:	e00d      	b.n	8001d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d3a:	f7ff fbdb 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001d3e:	61f8      	str	r0, [r7, #28]
        break;
 8001d40:	e009      	b.n	8001d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d46:	61fb      	str	r3, [r7, #28]
        break;
 8001d48:	e005      	b.n	8001d56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8001d54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d077      	beq.n	8001e4c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005a      	lsls	r2, r3, #1
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	441a      	add	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d916      	bls.n	8001da6 <UART_SetConfig+0x4a6>
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7e:	d212      	bcs.n	8001da6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	f023 030f 	bic.w	r3, r3, #15
 8001d88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	8afb      	ldrh	r3, [r7, #22]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	8afa      	ldrh	r2, [r7, #22]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	e052      	b.n	8001e4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001dac:	e04e      	b.n	8001e4c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001dae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d827      	bhi.n	8001e06 <UART_SetConfig+0x506>
 8001db6:	a201      	add	r2, pc, #4	; (adr r2, 8001dbc <UART_SetConfig+0x4bc>)
 8001db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbc:	08001de1 	.word	0x08001de1
 8001dc0:	08001de9 	.word	0x08001de9
 8001dc4:	08001df1 	.word	0x08001df1
 8001dc8:	08001e07 	.word	0x08001e07
 8001dcc:	08001df7 	.word	0x08001df7
 8001dd0:	08001e07 	.word	0x08001e07
 8001dd4:	08001e07 	.word	0x08001e07
 8001dd8:	08001e07 	.word	0x08001e07
 8001ddc:	08001dff 	.word	0x08001dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001de0:	f7ff fc20 	bl	8001624 <HAL_RCC_GetPCLK1Freq>
 8001de4:	61f8      	str	r0, [r7, #28]
        break;
 8001de6:	e014      	b.n	8001e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001de8:	f7ff fc32 	bl	8001650 <HAL_RCC_GetPCLK2Freq>
 8001dec:	61f8      	str	r0, [r7, #28]
        break;
 8001dee:	e010      	b.n	8001e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <UART_SetConfig+0x56c>)
 8001df2:	61fb      	str	r3, [r7, #28]
        break;
 8001df4:	e00d      	b.n	8001e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001df6:	f7ff fb7d 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001dfa:	61f8      	str	r0, [r7, #28]
        break;
 8001dfc:	e009      	b.n	8001e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e02:	61fb      	str	r3, [r7, #28]
        break;
 8001e04:	e005      	b.n	8001e12 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8001e10:	bf00      	nop
    }

    if (pclk != 0U)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	085a      	lsrs	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	441a      	add	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	d909      	bls.n	8001e46 <UART_SetConfig+0x546>
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d205      	bcs.n	8001e46 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	60da      	str	r2, [r3, #12]
 8001e44:	e002      	b.n	8001e4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001e58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3728      	adds	r7, #40	; 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e66:	bf00      	nop
 8001e68:	40008000 	.word	0x40008000
 8001e6c:	00f42400 	.word	0x00f42400

08001e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00a      	beq.n	8001e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01a      	beq.n	8001f86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f6e:	d10a      	bne.n	8001f86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	605a      	str	r2, [r3, #4]
  }
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b098      	sub	sp, #96	; 0x60
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001fc4:	f7fe faec 	bl	80005a0 <HAL_GetTick>
 8001fc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d12e      	bne.n	8002036 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f88c 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d021      	beq.n	8002036 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffa:	e853 3f00 	ldrex	r3, [r3]
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002006:	653b      	str	r3, [r7, #80]	; 0x50
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002010:	647b      	str	r3, [r7, #68]	; 0x44
 8002012:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002014:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002018:	e841 2300 	strex	r3, r2, [r1]
 800201c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800201e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e6      	bne.n	8001ff2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e062      	b.n	80020fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b04      	cmp	r3, #4
 8002042:	d149      	bne.n	80020d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f856 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03c      	beq.n	80020d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	e853 3f00 	ldrex	r3, [r3]
 800206a:	623b      	str	r3, [r7, #32]
   return(result);
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
 800207e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002084:	e841 2300 	strex	r3, r2, [r1]
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e6      	bne.n	800205e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3308      	adds	r3, #8
 8002096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	e853 3f00 	ldrex	r3, [r3]
 800209e:	60fb      	str	r3, [r7, #12]
   return(result);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3308      	adds	r3, #8
 80020ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020b0:	61fa      	str	r2, [r7, #28]
 80020b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b4:	69b9      	ldr	r1, [r7, #24]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	e841 2300 	strex	r3, r2, [r1]
 80020bc:	617b      	str	r3, [r7, #20]
   return(result);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1e5      	bne.n	8002090 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e011      	b.n	80020fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3758      	adds	r7, #88	; 0x58
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002114:	e04f      	b.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d04b      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7fe fa3f 	bl	80005a0 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <UART_WaitOnFlagUntilTimeout+0x30>
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e04e      	b.n	80021d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d037      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b80      	cmp	r3, #128	; 0x80
 800214a:	d034      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d031      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d110      	bne.n	8002182 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2208      	movs	r2, #8
 8002166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f838 	bl	80021de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2208      	movs	r2, #8
 8002172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e029      	b.n	80021d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002190:	d111      	bne.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800219a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f81e 	bl	80021de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e00f      	b.n	80021d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4013      	ands	r3, r2
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	bf0c      	ite	eq
 80021c6:	2301      	moveq	r3, #1
 80021c8:	2300      	movne	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d0a0      	beq.n	8002116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021de:	b480      	push	{r7}
 80021e0:	b095      	sub	sp, #84	; 0x54
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ee:	e853 3f00 	ldrex	r3, [r3]
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002204:	643b      	str	r3, [r7, #64]	; 0x40
 8002206:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002208:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800220a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800220c:	e841 2300 	strex	r3, r2, [r1]
 8002210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e6      	bne.n	80021e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3308      	adds	r3, #8
 800221e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	e853 3f00 	ldrex	r3, [r3]
 8002226:	61fb      	str	r3, [r7, #28]
   return(result);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3308      	adds	r3, #8
 8002236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002238:	62fa      	str	r2, [r7, #44]	; 0x2c
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800223e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002240:	e841 2300 	strex	r3, r2, [r1]
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e5      	bne.n	8002218 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002250:	2b01      	cmp	r3, #1
 8002252:	d118      	bne.n	8002286 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	e853 3f00 	ldrex	r3, [r3]
 8002260:	60bb      	str	r3, [r7, #8]
   return(result);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f023 0310 	bic.w	r3, r3, #16
 8002268:	647b      	str	r3, [r7, #68]	; 0x44
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002276:	6979      	ldr	r1, [r7, #20]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	e841 2300 	strex	r3, r2, [r1]
 800227e:	613b      	str	r3, [r7, #16]
   return(result);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1e6      	bne.n	8002254 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	669a      	str	r2, [r3, #104]	; 0x68
}
 800229a:	bf00      	nop
 800229c:	3754      	adds	r7, #84	; 0x54
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <main>:


UART_HandleTypeDef tUart2 = {0};

int main(void)
{
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
	/* Parameter initialization. */
	uint8_t ucTxDataBuff[] = "Hello Uart2 : ) \r\n";
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <main+0x40>)
 80022b0:	1d3c      	adds	r4, r7, #4
 80022b2:	461d      	mov	r5, r3
 80022b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b8:	682b      	ldr	r3, [r5, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	8022      	strh	r2, [r4, #0]
 80022be:	3402      	adds	r4, #2
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	7023      	strb	r3, [r4, #0]

	/* Initialize HAL. */
	HAL_Init();
 80022c4:	f7fe f8fc 	bl	80004c0 <HAL_Init>

	SystemClock_Config();
 80022c8:	f000 f872 	bl	80023b0 <SystemClock_Config>

	/* Initialize UART2. */
	InitUart2();
 80022cc:	f000 f810 	bl	80022f0 <InitUart2>

	/* Super loop. */
	while(1)
	{
		HAL_UART_Transmit(&tUart2, ucTxDataBuff, sizeof(ucTxDataBuff), 100);
 80022d0:	1d39      	adds	r1, r7, #4
 80022d2:	2364      	movs	r3, #100	; 0x64
 80022d4:	2213      	movs	r2, #19
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <main+0x44>)
 80022d8:	f7ff fa88 	bl	80017ec <HAL_UART_Transmit>

		HAL_Delay(500);
 80022dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022e0:	f7fe f96a 	bl	80005b8 <HAL_Delay>
		HAL_UART_Transmit(&tUart2, ucTxDataBuff, sizeof(ucTxDataBuff), 100);
 80022e4:	e7f4      	b.n	80022d0 <main+0x28>
 80022e6:	bf00      	nop
 80022e8:	08002530 	.word	0x08002530
 80022ec:	2000002c 	.word	0x2000002c

080022f0 <InitUart2>:
	}
}


void InitUart2(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
	// PA2 -- > Uart2 TX
	// PA3 -- > Uart2 RX

	GPIO_InitTypeDef tUart2Gpio = {0};
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	611a      	str	r2, [r3, #16]

	/* Enable Clock for GPIOA peripheral */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	4b24      	ldr	r3, [pc, #144]	; (8002398 <InitUart2+0xa8>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4a23      	ldr	r2, [pc, #140]	; (8002398 <InitUart2+0xa8>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <InitUart2+0xa8>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]

	/* Enable Clock for USART2 peripheral */
	__HAL_RCC_USART2_CLK_ENABLE();
 800231e:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <InitUart2+0xa8>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <InitUart2+0xa8>)
 8002324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002328:	6593      	str	r3, [r2, #88]	; 0x58
 800232a:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <InitUart2+0xa8>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]

	/* GPIO pins act as alternate function pins. */
	tUart2Gpio.Pin = (UART2_RX_PIN | UART2_TX_PIN);
 8002336:	230c      	movs	r3, #12
 8002338:	60fb      	str	r3, [r7, #12]

	/* Select the mode as alternate function. */
	tUart2Gpio.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	613b      	str	r3, [r7, #16]

	/* Alternate function 7. */
	tUart2Gpio.Alternate = GPIO_AF7_USART2;
 800233e:	2307      	movs	r3, #7
 8002340:	61fb      	str	r3, [r7, #28]

	/* No pull up resistor. */
	tUart2Gpio.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]

	/* Configure speed as very high. */
	tUart2Gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	61bb      	str	r3, [r7, #24]

	/* Init the GPIO pins. */
	HAL_GPIO_Init(UART2_PINS_POSRT, &tUart2Gpio);
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	4619      	mov	r1, r3
 8002350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002354:	f7fe fa3a 	bl	80007cc <HAL_GPIO_Init>

	/* Configure UART. */
	/* Select the UART instance. */
	tUart2.Instance = USART2;
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <InitUart2+0xac>)
 800235a:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <InitUart2+0xb0>)
 800235c:	601a      	str	r2, [r3, #0]

	/* Set the baud rate. */
	tUart2.Init.BaudRate = 9600;
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <InitUart2+0xac>)
 8002360:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002364:	605a      	str	r2, [r3, #4]

	/* Select word length as 8 bits. */
	tUart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <InitUart2+0xac>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]

	/* Select stop bits. */
	tUart2.Init.StopBits = UART_STOPBITS_1;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <InitUart2+0xac>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]

	/*Set Parity. */
	tUart2.Init.Parity = UART_PARITY_NONE;
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <InitUart2+0xac>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]

	/* Select the mode. */
	tUart2.Init.Mode = UART_MODE_TX_RX;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <InitUart2+0xac>)
 800237a:	220c      	movs	r2, #12
 800237c:	615a      	str	r2, [r3, #20]

	/* Set the hw flow control. */
	tUart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <InitUart2+0xac>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]

	/* Set the over sampling. */
	tUart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <InitUart2+0xac>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&tUart2);
 800238a:	4804      	ldr	r0, [pc, #16]	; (800239c <InitUart2+0xac>)
 800238c:	f7ff f9d6 	bl	800173c <HAL_UART_Init>

	return;
 8002390:	bf00      	nop
}
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	2000002c 	.word	0x2000002c
 80023a0:	40004400 	.word	0x40004400

080023a4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80023a8:	f7fe f8e6 	bl	8000578 <HAL_IncTick>
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b098      	sub	sp, #96	; 0x60
 80023b4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	2244      	movs	r2, #68	; 0x44
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f87d 	bl	80024be <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <SystemClock_Config+0xb4>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	4a22      	ldr	r2, [pc, #136]	; (8002464 <SystemClock_Config+0xb4>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	6593      	str	r3, [r2, #88]	; 0x58
 80023e0:	4b20      	ldr	r3, [pc, #128]	; (8002464 <SystemClock_Config+0xb4>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <SystemClock_Config+0xb8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023f4:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <SystemClock_Config+0xb8>)
 80023f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <SystemClock_Config+0xb8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	683b      	ldr	r3, [r7, #0]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002408:	2302      	movs	r3, #2
 800240a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800240c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002412:	2310      	movs	r3, #16
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002416:	2302      	movs	r3, #2
 8002418:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800241a:	2302      	movs	r3, #2
 800241c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLM = 1;
 800241e:	2301      	movs	r3, #1
 8002420:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLN = 10;
 8002422:	230a      	movs	r3, #10
 8002424:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002426:	2307      	movs	r3, #7
 8002428:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800242a:	2302      	movs	r3, #2
 800242c:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800242e:	2302      	movs	r3, #2
 8002430:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fb80 	bl	8000b3c <HAL_RCC_OscConfig>
        //Error_Handler();
    }

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800243c:	230f      	movs	r3, #15
 800243e:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002440:	2303      	movs	r3, #3
 8002442:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002450:	f107 0308 	add.w	r3, r7, #8
 8002454:	2104      	movs	r1, #4
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe ff4c 	bl	80012f4 <HAL_RCC_ClockConfig>
        //Error_Handler();
    }
}
 800245c:	bf00      	nop
 800245e:	3760      	adds	r7, #96	; 0x60
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	40007000 	.word	0x40007000

0800246c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800246c:	480d      	ldr	r0, [pc, #52]	; (80024a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800246e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002470:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002476:	490d      	ldr	r1, [pc, #52]	; (80024ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <LoopForever+0xe>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800248c:	4c0a      	ldr	r4, [pc, #40]	; (80024b8 <LoopForever+0x16>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800249a:	f000 f819 	bl	80024d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249e:	f7ff ff03 	bl	80022a8 <main>

080024a2 <LoopForever>:

LoopForever:
  b LoopForever
 80024a2:	e7fe      	b.n	80024a2 <LoopForever>
  ldr   r0, =_estack
 80024a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80024b0:	0800259c 	.word	0x0800259c
  ldr r2, =_sbss
 80024b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80024b8:	200000b4 	.word	0x200000b4

080024bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC1_2_IRQHandler>

080024be <memset>:
 80024be:	4402      	add	r2, r0
 80024c0:	4603      	mov	r3, r0
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d100      	bne.n	80024c8 <memset+0xa>
 80024c6:	4770      	bx	lr
 80024c8:	f803 1b01 	strb.w	r1, [r3], #1
 80024cc:	e7f9      	b.n	80024c2 <memset+0x4>
	...

080024d0 <__libc_init_array>:
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	4d0d      	ldr	r5, [pc, #52]	; (8002508 <__libc_init_array+0x38>)
 80024d4:	4c0d      	ldr	r4, [pc, #52]	; (800250c <__libc_init_array+0x3c>)
 80024d6:	1b64      	subs	r4, r4, r5
 80024d8:	10a4      	asrs	r4, r4, #2
 80024da:	2600      	movs	r6, #0
 80024dc:	42a6      	cmp	r6, r4
 80024de:	d109      	bne.n	80024f4 <__libc_init_array+0x24>
 80024e0:	4d0b      	ldr	r5, [pc, #44]	; (8002510 <__libc_init_array+0x40>)
 80024e2:	4c0c      	ldr	r4, [pc, #48]	; (8002514 <__libc_init_array+0x44>)
 80024e4:	f000 f818 	bl	8002518 <_init>
 80024e8:	1b64      	subs	r4, r4, r5
 80024ea:	10a4      	asrs	r4, r4, #2
 80024ec:	2600      	movs	r6, #0
 80024ee:	42a6      	cmp	r6, r4
 80024f0:	d105      	bne.n	80024fe <__libc_init_array+0x2e>
 80024f2:	bd70      	pop	{r4, r5, r6, pc}
 80024f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f8:	4798      	blx	r3
 80024fa:	3601      	adds	r6, #1
 80024fc:	e7ee      	b.n	80024dc <__libc_init_array+0xc>
 80024fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002502:	4798      	blx	r3
 8002504:	3601      	adds	r6, #1
 8002506:	e7f2      	b.n	80024ee <__libc_init_array+0x1e>
 8002508:	08002594 	.word	0x08002594
 800250c:	08002594 	.word	0x08002594
 8002510:	08002594 	.word	0x08002594
 8002514:	08002598 	.word	0x08002598

08002518 <_init>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	bf00      	nop
 800251c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251e:	bc08      	pop	{r3}
 8002520:	469e      	mov	lr, r3
 8002522:	4770      	bx	lr

08002524 <_fini>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	bf00      	nop
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr
